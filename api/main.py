{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbdacbe1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Main.py\n",
    "\n",
    "import io\n",
    "import os\n",
    "from fastapi import FastAPI, HTTPException, File, UploadFile\n",
    "from fastapi.middleware.cors import CORSMiddleware\n",
    "from fastapi.responses import Response, FileResponse\n",
    "from typing import List\n",
    "import json\n",
    "\n",
    "from enum import Enum\n",
    "\n",
    "\n",
    "class FileType(Enum):\n",
    "    audio: str = 'AUDIO'\n",
    "\n",
    "BASE_PATH = '/Users/johanvekeman/Documents/Datasets/Home_Assignment/Audio'\n",
    "AUDIO_PATH = os.path.join(BASE_PATH, FileType.audio.value)\n",
    "os.makedirs(AUDIO_PATH, exist_ok=True)\n",
    "\n",
    "app = FastAPI()\n",
    "\n",
    "# Load registered model\n",
    "\n",
    "loaded_model=tf.keras.models.load_model('my_model.h5')\n",
    "\n",
    "# Predict if a defect occurred or not, based on an sound file of 1s in length\n",
    "\n",
    "def predict_audio_file(file):\n",
    "    audio, sr = librosa.load(file, 22000)\n",
    "    Spectrogram=librosa.feature.melspectrogram(audio)\n",
    "    # The input shape for a CNN in Tensorflow should be in the format (batch, height, width, channels).\n",
    "    Spectrogram=Spectrogram.reshape(1, Spectrograms[0].shape[0],Spectrograms[0].shape[1], 1)\n",
    "    prediction = model.predict(Spectrogram)\n",
    "    prediction = np.argmax(model.predict(Spectrogram), axis=-1)\n",
    "    index=prediction[0]\n",
    "    labels = ['No defect is detected', 'A defect is detected']\n",
    "    return {'Prediction': labels[index]}\n",
    "\n",
    "app.add_middleware(\n",
    "    CORSMiddleware,\n",
    "    allow_origins=[\"*\"],\n",
    "    allow_credentials=True,\n",
    "    allow_methods=[\"*\"],\n",
    "    allow_headers=[\"*\"],\n",
    ")\n",
    "\n",
    "@app.get(\"/\")\n",
    "def root():\n",
    "    return {\"message\":\"Hello World\"}\n",
    "\n",
    "@app.get(\"/audio\", response_model=List[str])\n",
    "def getAllAudio():\n",
    "    return os.listdir(AUDIO_PATH)\n",
    "\n",
    "@app.get(\"/audio/{filename}\", response_class=FileResponse)\n",
    "def getAudioById(filename: str):\n",
    "    try:\n",
    "        file = os.path.join(AUDIO_PATH, filename)\n",
    "        return predict_audio_file(file)\n",
    "    except Exception as e:\n",
    "        return HTTPException(500, f'Something went wrong while trying to return file {filename}')\n",
    "\n",
    "@app.post(\"/upload\")\n",
    "def uploadFile(file: UploadFile = File(...), type: FileType = FileType.default):\n",
    "    print(f\"Upload type: {type}\")\n",
    "    print(f\"Upload type: {type.value}\")\n",
    "    fileLocation = os.path.join(BASE_PATH, type.value, file.filename)\n",
    "    try:\n",
    "        open(fileLocation, 'wb').write(file.file.read())\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "        return HTTPException(500, f'Something went wrong while trying to upload file {file.filename}')\n",
    "\n",
    "    return Response(f'Uploaded file to {fileLocation}', 200)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9 (tensorflow)",
   "language": "python",
   "name": "tensorflow"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
